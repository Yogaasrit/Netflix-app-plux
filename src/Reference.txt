NodeJS Ecosystem
----------------
  Server Marketplace: npmjs.com
  Client: npm that is installed in computer
  
  Dependencies
  ----
    1. Project Dependencies
        * the packages that are needed for the app's functionality to work 

        examples: dropzone, datatables.net, bootstrap, jquery, react 

        npm i dropzone
        npm i dropzone --save 
        npm i dropzone -S 

        npm update dropzone 
        npm uninstall dropzone

        In package.json, you can find the installed Project Dependencies here,
        "dependencies": {
          "dropzone": "6.0.0-beta.2"
        },

    2. Dev Dependencies 
        * the packages that are needed for the app to be developed
        * not needed for the functionality 
        * needed during the development 

        examples: webpack, sass, less, typescript

        npm i webpack --save-dev
        npm i webpack -D 

        npm update webpack -D 
        npm uninstall webpack -D 

        In package.json, you can find the installed Dev Dependencies here,
        "devDependencies": {
          "webpack": "5.79.0"
        }
-----------------------------------------------------------------------------------------------
Learn about intergrating bootstrap(npm) 3 ways to integerate bootstrap
1. Orginal bootstrap - raw bootstrap --> prefered to use. 
   https://create-react-app.dev/docs/adding-bootstrap/
2. react-bootstrap
   npm i react-bootstrap
3. reactstrap
   npm i reactstrap
-------------------------------------------------------------------------------
cross component communication

1. Parent to child   (Footer to MenuList)

  Using props


2. Child to Parent  (Footer to App)

   Using props and callback function and event listner 


3. Any to Any component (siblings to siblings, child to grandparent)

   Using context API
   Using Redux js/Flux/Mobx

--------------------------------------------------------------------------------
1.Functional Component - Must be in component folder
    // 1. Named Function
    // 2. UnNamed Function
    // 3. Arror Function 

    import - optional
    component
        must return jsx
    export


2.Class Component  - in be container folder

      import Component class react= Must 
      // import {Component} from "react';
            component must inherit(class **name extends React.Component)
          must have render method
          must return jsx
      export

----------------------------------------------------------------------------------
Concepts:
1. Data binding
2. Props 
3. states
4. EVents
5. List and Keys
6. Conditionals


-----------------------------------------------------------------------------------
Data Binding:
//Data binding - Keep the data inside the comp and use it
    //2 types of databinding- one way, two way
    // 1 way - Jsx displays the data
    // 2 way - Keep the ata in variable and display it in jsx 
    // then update the data and see the changes in jsx.
------------------------------------------------------------------------------------
props:
  // attributes
  // Used for Parent to child communication
-----------------------------------------------------------------------------------
Events:
State is a place to hold component wide data
state is a keyword in react
state is a object
state = {
  x = 10;
}


--------------------------------------------------------------------------------------
RAFCE = React Arrow Functional Component export
______________________________________________________________________________________

Naming Conventions & Casing 
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * also Recommended for Interface in Java & TypeScript 
        * all react components should be named in PascalCase
        * all components folder should be of this type 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html or JSX elements 

        examples 
        -----
          var myCar = 'BMW';

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names (if not react), assets in front end projects 
        * Recommended for css classes 
        * okay for id's of html elements if your architect says okay

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;

------------------------------------------------------------------------------------------------------------
Styling in React
----------------
1. External Styling
    From third party - ex bootstrap
    Our own third 
    ex : index.js --> Global Any one can access

    Even if we write the css inside the component it is Global....
    
2. Internal styling
3. Inline styling
-----------------------------------------------------------------------------------------------------------
One-Way binding
--------------
* JS -> JSX
keeping the data in js and displaying it in jsx.
Two-Way Binding
* JS <-> JSX
Changing The value in JSX will reflect in JS also.


---------------------------------------------------------------------------------------------------------

Single Page App (SPA) Characteristics (7)
-------------------------------------------
  1. Pages should Not Refresh 
  2. URL should be changed 
  3. History should be maintained without Page Refresh 
  4. Header and Footer should be intact. 
  5. The section in between header and footer should be updated 
  6. Active Menu should be set 
  7. Page Title should also be changed 

  --------------------------------------------------------------------------------------------------------
Life Cycle of Hooks
-----------------------

Class Component only will have Hooks.
Hooks are methods.(MEthod is a function coded inside a class).

--------------------------------------------------------------------------------------------------
Routing
-----------

  Step 1:
  ------
    npm i react-router-dom

  Step 2: 
  -----
    Identify the Menu's and the URL's

    Home                http://localhost:3001/
    About Us            http://localhost:3001/about-us 
    Contact Us          http://localhost:3001/contact-us

    absolute URL -  http://localhost:3001/about-us 
    relative URL -  /about-us 

  Step 3: 
  ----  
    Setup the Menus with proper URLs in MenuList.js 

  Step 4:
  ----
    Identifing what comp should be loaded the following URL. 

    http://localhost:3001/                   --> HomePage 
    http://localhost:3001/about-us           --> AboutUsPage 
    http://localhost:3001/contact-us         --> ContactUsPage 

    Let's create the necessary components for the URLs 

    Step 5:
  -----
    Config the Routes in App.js 

    <BrowserRouter>---> import { BrowserRouter,Routes,Route } from 'react-router-dom';
      <div>
        <Header></Header>

        <main className="container mt-5 pt-2">
          <Routes>
            <Route path="/" element={<HomePage />}></Route>
            <Route path="/about-us" element={<AboutUsPage />}></Route>
            <Route path="/contact-us" element={<ContactUsPage />}></Route>
          </Routes>
        </main>

        <Footer />
      </div>
    </BrowserRouter>

  Step 6:
  -----
    For without page refresh change,
    Let's replace <a href=''> with <Link to=''> in MenuList.js
----------------------------------------------------------------------------------------------------------
Helmet package

Advance Topics:
----------------

1. Fragment
------------
Fragment  is used to wrap the more children tags instead of div
<Fragment>
  <h1></h1>
  <b><b>
</Fragment>->Import fragment.
There is no trace in console.
Will not appear anywhere in UI.
Multiple fragments is not allowed.

<></> -> This is also fragment.

2. Strictmode
--------------
It is programmed to print twice during development mode.
Javascript engine will work in Two modes:
  1. Non-strict mode-default
  2. Strictmode - "use strict" in js
  when we give "use strict" it works on strict mode.
  It can also be in function.

3. Hoc - Higher Order Component
----------------------------------
// a higher-order component (HOC) is a function that
// takes a component as input and return a new comp as output

4. Types of Language based on Data typing
-----------------------------------------
  1. Strictly Typed / Strongly Typed
      ex: Java,C#,TypeScript
      String myStr = "Yoga";
      myStr = false;// -> ERROR

  2. Loosely typed / dynamically typed
      ex: Js,python,php
      myStr = "Yoga";
      myStr = false;// -> NO ERROR

5.Static TypeChecking
----------------------
    1. Intergrating TypeScript. (.tsx)
    2. FlowJs (.js)
    3. prop-types -> install from "https://www.npmjs.com/package/prop-types" command npm i prop-types to install.
    import in the component(props) where we need to do type checking.
    example : latest video.


6. Linting
----------------
    ESLINT
    ** Setting Linting
    ---------------
    install eslint - npm i eslint --save-dev
    set up - npx eslint --init

    In package.json- inside script add these two lines.
    "lint" : "eslint .",
    "lint:fix" : "eslint . --fix"

    	1.to check syntax, find prblm, and enfore code style
	2.javascript
	3.react
	4.no typescript
	5.browser
	6.use a popular stype
	7.standard
	8.json

    lint is used to show the errors.
    lint:fix is used to fix the errors.

    In terminal, run-> npm run lint 
    This will give the errors in all components.

    To fix it, in terminal run-> npm run lint:fix
    This will fix the all errors automatically.

    ** How to Setup ESLint and prettier?
    ----------------------
    prettier - extension 

    create .prettierrc.json in root folder in project
    Type,
    {
      "singleQuote": true,
      "trailingComma": "none"
    }
    reference link :
    https://medium.com/@frontend-newbie/integrating-prettier-with-eslint-for-your-create-react-app-in-vscode-153ebe89c1a2
    
    ** linting will show error in App.test.js file  
        open .eslintrc.json, modify
        "env": {
          "browser": true,
          "es2021": true,
          "jest": true /// This line is needed to fix the error around JEST codes in App.test.js 
        },
    ** Warning: React version not specified in eslint-plugin-react settings ->
        There will be a warning related to react version during linting.
        Fixing by having the following in .eslintrc.json file 
        "settings": {
          "react": {
            "version": "detect"
          }
        }
------------------------------------------------------------------------------------------------------
Hooks:
=======
Before react 16.8
-----------------
1. Functional components didnt have state.
2. Functional components didnt have lifecycle Hooks.
After react 16.8 both are possible in functional component.

Rules for writing hooks:
------------------------
1. Write hooks in a top level.
   Dont write inside loop, function, Conditionals.
2. Write hooks in a component(functional).
   Dont write in function.

1. useState() Hook 
--------------------
 // Returns a stateful value, and a function to update it.
  // const myArray = useState('Yogaa');
  // This array always have two index only- 1. State Value 2. Function.
  // console.log(myArray);
  // console.log(myArray[o]); - Yogaa
  // Being only two index we destructure - const [name, setName] = useState('Yoga);

  const [accountName, setAccountName] = useState('Yoga');
  // name - state value
  // setName- function
  // Initially name is 'Yoga' when setName is called it updates the state as 'Sri'.
   const HandleChangeUserName = () => {
    setAccountName('Sri');
  }

2. useContext()
-------------------
  It is used to share the data with any to any component.

  Step 1: createContext with any data or even null inside.
  Refer: PageContext.js 

  Step 2: Provide the data to the list of components you want to share.
  Check: App.js 

  const userDetails = {
    isLoggedIn: false,
    lastLogIn: 'Yesterday 10 PM'
  };

  Step 3: Using <PageContext.Provider> to share the data across the few components.
  
  Step 4: Consume it in contactUs using useContext(PageContext);
  check: contactUs.

3. useEffect()
  -------------------
  useEffect() - Hook 
  is what componentDidMount and componentDidUpdate to class comp 
  will get executed after render cycle 
  useEffect( () => {
    console.log('test');
  })

4. useReducer()
----------------------

  It is a function that have state and action.
  Initially state is empty 
  // it must return new state based on the "type of action" dispatched.
  todoReducer.js:->
  const todoReducer = (state = [], action) => {
    return state;
  }
  Todovarient2.js : ->
  const [todoList, todoDispatch] = useReducer(todoReducer);
    // UseReducer always expect the reducer. -> useReducer(todoReducer) here, todoReducer is a reducer.
    // todoList is a state data. It can be array or object or single data.
    // console.log(todoList);// undefined
    // undefined -- get the state data from reducer. How?
    // dispatcher fn must be called with an action obj to get state data from the reducer
    // console.log(todoDispatch);

    const handleAddTodo = () => {
      // console.log(todoInput.current.value);
      // calling dispatch method with action type.
      todoDispatch({
        type: 'Add-Todos',
        payload: {
          id: Math.floor(Math.random() * 1000),
          title: todoInput.current.value,
          isCompleted: false
        }
      });
    };
  
  5. useRef:
  -------------
    const todoInput = useRef('');
    // create a ref for the input field to capture the entered input in a fn comp.
    ref={todoInput}

  6. useId:
  --------------


  
Displaying cartItem count in header
-------------------------------------

1. App.js -> const [cartState, cartDispatcher] = useReducer(CartReducer);
Initially cartState will be undefined.
          cartDispatcher will be unexecutedFunction.
useReducer is a hook like useState which updates the state.
Here, CartReducer is a reducer inside reducer folder.

2. CartReducer -> It consist of state and action.
Initially state is empty.
          Action is a object.
Const CartReducer = (state = [] , action) => {
  return state.
}

The Data should be passed from shopPage to header.

3. App.js -> We need cartState in header component to change the value in cart button.
             We need cartDispatcher in shopPage component to sent the action to CartReducer.

4. So to set the communication between header with App and shopPage with App,
we need useContext.

5. CartContext:-> create createContext in CartContext file and export it.

6. App js: -> set CartContext.Provider and the cartState, cartDispatcher as value.
So keep cartState, cartDispatcher in single object 'cart' and send cart as value.
<CartContext.Provider value={cart}>
Wrap it up with the components where the data to be shared.

7. shopPage: -> useContext for communication
const cart = useContext(CartContext);
In handler, the disptacher function is called.
const handleAddToCart = (product) => {
    // console.log(product);
    cart.cartDispatcher({
      type: 'ADD_TO_CART',
      payload: product
    });
  };

8. In CartReducer, switch statement is executed.
based on the type, the action is performed.
ADD_TO_CART is .
so the item is added in the state(ie.cartState).

8. Header: -> useContext for communication
const cart = useContext(CartContext);
cart.cartState is needed in header bc we need only the state data.
So destructing cart.cartState and printing its length inside button.

--------------------------------------------------------------------------------------
Connecting Backend Third party:
------------------------------
/* Ways to make REST API Calls in JS
  1. using AJAX (XMLHttpRequest)    -- Native JS
  2. using promised based fetch api (introduced in 2015  -- Native JS)
  3. using axios (third-party) 
*/
 // will be executed after initial rendering
    // ideal place for your REST API calls
    /* What are the things you need to connect to REST API?
    1. What's the REST API URL / Endpoint?
        https://jsonplaceholder.typicode.com/todos?_limit=3
    2. What's the HTTP Method? GET
    3. What's the REST API Client / Http client tool? axios
    */
Ref: Todovarient2
-=----------------------------------------------------------
Unit Testing
================
Project: Calc 
----
  Analysis 
    Design 
      Development 
        Testing 
          Deployment 
            Maintanance 

Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (bugs) => Dev => QA => (QA PASSED) => Deployment 


Development
----
  Sources: FRD, HLD, LLD, Design, Style Guide

  Approach: 
  ----
    Write Test cases => write functionality => (Tools) => [PASS/FAIL] 

  Dev should prepare Test cases for add feature: 
  -----
    1. add should take in only numbers as inputs 
    2. add should return number as output 
    3. if wrong inputs entered -- add button should be disabled
    4. add button should + icon


  feature: add 
  -----
    function add(a, b){
      if(typeof a === number && typeof b === number) {
        return a + b;
      }
    }
    add(10, 20); // 30 

    <button type="button"><i className='plug-io></i>

  Tools for testing: 
  -----
    * will compare the functionality code with the test cases


Modern Software Dev Approaches :
------------------------------
  1. Test-Driven Development (TDD)  -- TO LEARN
      * Write NEW CODE only if automated test fails 

      Dev writes test cases => (FAILURE) => Dev writes functionality => (SUCCESS) => [CODE COMPLETE]

      Test Pattern: AAA (Arrange, Act, Assert)
      
      Tools: JEST JS 

  2. Behavior-Driven Development (BDD)
      * an agile s/w methodology 
      * app is documented, designed around the Behavior the end user wants to 
        experience when interacting with the app

      Dev writes Test Cases around the Behavior of the app => (FAILURE) => Dev writes functionality => (SUCCESS) => [CODE COMPLETE]

      Test Pattern: Given/When/Then 
      Tools: Jasmine JS 


Automated Testing 
----------------
  Levels 
    0. Static Type Checking
        Examples: TypeScript or Flow JS or Prop-Types

    1. Unit Testing
        * Testing tiny, independent unit of our code 
        * Testing the component in isolation (without connecting to REST API)
        * Bug Reduction Density: 40-80%

        Tools: 
        ----  
          JEST JS (Unit Testing Framework + Test Runner)
          React Testing Library (RTL)  = DOM Querying Utility

    2. Integration Testing 
        * Testing the component by integrating multiple components together 
        * Testing the component with Service calls (REST API Calls)

        Tools: 
        -----
          JEST JS (Unit Testing Framework + Test Runner)
          React Testing Library (RTL)

    3. End to End (E2E) Testing 
        * Testing the whole app as one entity 
        * Will be done by QA team members 

        Tools: 
        ----
          * Selenium 
          * CypressJS 
          * Protractor 
          * Playwright 

To Learn 
----------
  1. How to write test cases?
  2. Where to write test cases? 
  3. How to test the app by tools? 

Unit Testing Topics 
==================
  0. File walkthru 
  1. Testing JSX Elements 
      * getByText 
      * getByTestId 
      * getByPlaceholderText 
  2. Testing Props 
  3. Testing inline CSS 
  4. Testing External CSS (CSS class) 
  5. Testing Events & States 
  6. Testing Events with Buttons 
  7. Snapshot Testing 
  8. Testing Forms 
      Ref: ContactUsPage.js and ContactUsPage.test.js 
      Validate the form using test cases
      html form 

  9. Testing REST API Calls 
      * with mocks 
        1. using fetch 
            https://github.com/arunprabu/plain-ui-react-course-feb-2023/blob/master/youtube-react-app/src/pages/UnitTestingDemoPage/Users/Users.js
            https://github.com/arunprabu/plain-ui-react-course-feb-2023/blob/master/youtube-react-app/src/pages/UnitTestingDemoPage/Users/Users.test.js
            https://github.com/arunprabu/plain-ui-react-course-feb-2023/blob/master/youtube-react-app/src/utils/fetchApi.js
        2. using axios
            positive test
            negative test
      * with spies 
        1. using fetch
          positive test
          negative test
        2. using axios 
  10. Testing Routing 
  11. Setup and Tear Down
  12. Code Coverage

