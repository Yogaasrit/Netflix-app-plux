NodeJS Ecosystem
----------------
  Server Marketplace: npmjs.com
  Client: npm that is installed in computer
  
  Dependencies
  ----
    1. Project Dependencies
        * the packages that are needed for the app's functionality to work 

        examples: dropzone, datatables.net, bootstrap, jquery, react 

        npm i dropzone
        npm i dropzone --save 
        npm i dropzone -S 

        npm update dropzone 
        npm uninstall dropzone

        In package.json, you can find the installed Project Dependencies here,
        "dependencies": {
          "dropzone": "6.0.0-beta.2"
        },

    2. Dev Dependencies 
        * the packages that are needed for the app to be developed
        * not needed for the functionality 
        * needed during the development 

        examples: webpack, sass, less, typescript

        npm i webpack --save-dev
        npm i webpack -D 

        npm update webpack -D 
        npm uninstall webpack -D 

        In package.json, you can find the installed Dev Dependencies here,
        "devDependencies": {
          "webpack": "5.79.0"
        }
-----------------------------------------------------------------------------------------------
Learn about intergrating bootstrap(npm) 3 ways to integerate bootstrap
1. Orginal bootstrap - raw bootstrap --> prefered to use. 
   https://create-react-app.dev/docs/adding-bootstrap/
2. react-bootstrap
   npm i react-bootstrap
3. reactstrap
   npm i reactstrap
-------------------------------------------------------------------------------
cross component communication

1. Parent to child   (Footer to MenuList)

  Using props


2. Child to Parent  (Footer to App)

   Using props and callback function and event listner 


3. Any to Any component (siblings to siblings, child to grandparent)

   Using context API
   Using Redux js/Flux/Mobx

--------------------------------------------------------------------------------
1.Functional Component - Must be in component folder
    // 1. Named Function
    // 2. UnNamed Function
    // 3. Arror Function 

    import - optional
    component
        must return jsx
    export


2.Class Component  - in be container folder

      import Component class react= Must 
      // import {Component} from "react';
            component must inherit(class **name extends React.Component)
          must have render method
          must return jsx
      export

----------------------------------------------------------------------------------
Concepts:
1. Data binding
2. Props 
3. states
4. EVents
5. List and Keys
6. Conditionals


-----------------------------------------------------------------------------------
Data Binding:
//Data binding - Keep the data inside the comp and use it
    //2 types of databinding- one way, two way
    // 1 way - Jsx displays the data
    // 2 way - Keep the ata in variable and display it in jsx 
    // then update the data and see the changes in jsx.
------------------------------------------------------------------------------------
props:
  // attributes
  // Used for Parent to child communication
-----------------------------------------------------------------------------------
Events:
State is a place to hold component wide data
state is a keyword in react
state is a object
state = {
  x = 10;
}


--------------------------------------------------------------------------------------
RAFCE = React Arrow Functional Component export
______________________________________________________________________________________

Naming Conventions & Casing 
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * also Recommended for Interface in Java & TypeScript 
        * all react components should be named in PascalCase
        * all components folder should be of this type 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html or JSX elements 

        examples 
        -----
          var myCar = 'BMW';

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names (if not react), assets in front end projects 
        * Recommended for css classes 
        * okay for id's of html elements if your architect says okay

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;

------------------------------------------------------------------------------------------------------------
Styling in React
1. External Styling
    From third party - ex bootstrap
    Our own third 
    ex : index.js --> Global Any one can access

    Even if we write the css inside the component it is Global....
    
2. Internal styling
3. Inline styling
-----------------------------------------------------------------------------------------------------------
One-Way binding
* JS -> JSX
keeping the data in js and displaying it in jsx.
Two-Way Binding
* JS <-> JSX
Changing The value in JSX will reflect in JS also.


---------------------------------------------------------------------------------------------------------

Single Page App (SPA) Characteristics (7)
---------------
  1. Pages should Not Refresh 
  2. URL should be changed 
  3. History should be maintained without Page Refresh 
  4. Header and Footer should be intact. 
  5. The section in between header and footer should be updated 
  6. Active Menu should be set 
  7. Page Title should also be changed 

  --------------------------------------------------------------------------------------------------------
Life Cycle of Hooks

Class Component only will have Hooks.
Hooks are methods.(MEthod is a function coded inside a class).

--------------------------------------------------------------------------------------------------
Routing 

  Step 1:
  ------
    npm i react-router-dom

  Step 2: 
  -----
    Identify the Menu's and the URL's

    Home                http://localhost:3001/
    About Us            http://localhost:3001/about-us 
    Contact Us          http://localhost:3001/contact-us

    absolute URL -  http://localhost:3001/about-us 
    relative URL -  /about-us 

  Step 3: 
  ----  
    Setup the Menus with proper URLs in MenuList.js 

  Step 4:
  ----
    Identifing what comp should be loaded the following URL. 

    http://localhost:3001/                   --> HomePage 
    http://localhost:3001/about-us           --> AboutUsPage 
    http://localhost:3001/contact-us         --> ContactUsPage 

    Let's create the necessary components for the URLs 

    Step 5:
  -----
    Config the Routes in App.js 

    <BrowserRouter>---> import { BrowserRouter,Routes,Route } from 'react-router-dom';
      <div>
        <Header></Header>

        <main className="container mt-5 pt-2">
          <Routes>
            <Route path="/" element={<HomePage />}></Route>
            <Route path="/about-us" element={<AboutUsPage />}></Route>
            <Route path="/contact-us" element={<ContactUsPage />}></Route>
          </Routes>
        </main>

        <Footer />
      </div>
    </BrowserRouter>

  Step 6:
  -----
    For without page refresh change,
    Let's replace <a href=''> with <Link to=''> in MenuList.js
----------------------------------------------------------------------------------------------------------
Helmet package

Advance Topics:

1. Fragment
Fragment  is used to wrap the more children tags instead of div
<Fragment>
  <h1></h1>
  <b><b>
</Fragment>->Import fragment.
There is no trace in console.
Will not appear anywhere in UI.
Multiple fragments is not allowed.

<></> -> This is also fragment.

2. Strictmode
It is programmed to print twice during development mode.
Javascript engine will work in Two modes:
  1. Non-strict mode-default
  2. Strictmode - "use strict" in js
  when we give "use strict" it works on strict mode.
  It can also be in function.

3. Hoc - Higher Order Component
// a higher-order component (HOC) is a function that
// takes a component as input and return a new comp as output

4. Types of Language based on Data typing
  1. Strictly Typed / Strongly Typed
      ex: Java,C#,TypeScript
      String myStr = "Yoga";
      myStr = false;// -> ERROR

  2. Loosely typed / dynamically typed
      ex: Js,python,php
      myStr = "Yoga";
      myStr = false;// -> NO ERROR

5.Static TypeChecking
    1. Intergrating TypeScript. (.tsx)
    2. FlowJs (.js)
    3. prop-types -> install from "https://www.npmjs.com/package/prop-types" command npm i prop-types to install.
    import in the component(props) where we need to do type checking.
    example : latest video.


6. Linting
    ESLINT
    ** Setting Linting
    ---------------
    install eslint - npm i eslint --save-dev
    set up - npx i eslint --init

    In package.json- inside script add these two lines.
    "lint" : "eslint .",
    "lint:fix" : "eslint . --fix"

    lint is used to show the errors.
    lint:fix is used to fix the errors.

    In terminal, run-> npm run lint 
    This will give the errors in all components.

    To fix it, in terminal run-> npm run lint:fix
    This will fix the all errors automatically.

    ** How to Setup ESLint and prettier?
    ----------------------
    prettier - extension 

    create .prettierrc.json in root folder in project
    Type,
    {
      "singleQuote": true,
      "trailingComma": "none"
    }
    reference link :
    https://medium.com/@frontend-newbie/integrating-prettier-with-eslint-for-your-create-react-app-in-vscode-153ebe89c1a2
    
    ** linting will show error in App.test.js file  
        open .eslintrc.json, modify
        "env": {
          "browser": true,
          "es2021": true,
          "jest": true /// This line is needed to fix the error around JEST codes in App.test.js 
        },
    ** Warning: React version not specified in eslint-plugin-react settings ->
        There will be a warning related to react version during linting.
        Fixing by having the following in .eslintrc.json file 
        "settings": {
          "react": {
            "version": "detect"
          }
        }


--------------------------------------------------

  


